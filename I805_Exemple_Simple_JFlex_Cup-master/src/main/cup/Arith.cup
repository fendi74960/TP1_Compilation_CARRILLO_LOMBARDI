/* package et imports */
package fr.usmb.m1isc.compilation.simple;
import java_cup.runtime.Symbol;
import java.util.HashMap;
import java.util.Map;


// nom de la classe a generer
class ArithParser;

/* inclusion du code */

action code {: 
    // pour utilisation dans les actions (classe action)
    Map<String, Integer> variables = new HashMap<>(); 
:};


parser code {:
    // pour le parser (redefinition de la methode reportant les erreurs d'analyse)
    public void report_error(String message, Object info) {
        String m = "";
        if (info instanceof java_cup.runtime.Symbol) {
            Symbol s = ((Symbol) info);     
            if (s.left >= 0) {
                /* Ajoute le numero de ligne  */
                m = m + "Ligne " + (s.left+1) + " ";
            }
            if (s.right >= 0) {
                /* Ajoute le numero de colonne  */
                m = m + "Colonne " + (s.right+1) + " ";
            }
            if (s.left >=0  || s.right >= 0) {
                m = m + ": ";            
            }
            m = m + "Erreur de syntaxe";
        
        }
        else{
        	m = m + "Erreur variable non declarer";
        }
        System.out.println(m);
        
    }
:};

 init with {:
    //    initialisation du parser
:};

/* symboles terminaux */
terminal NOMBRE, POINT, PLUS, MOINS, MULT, DIVIDE, PAR_G, PAR_D, MOD,ERROR,UMINUS,LET,EQ,STRI;

/* non terminaux */
non terminal expr;
non terminal texte,expression,declaration;

/* Precedences */
precedence left PLUS, MOINS;
precedence left MULT, DIVIDE, MOD;
precedence left UMINUS;
precedence left LET;

/* grammaire */

texte   ::= expression texte 
		  | declaration texte
		  | declaration
          | expression   ;  
          
declaration ::=   LET:s EQ expr:n {: variables.put(((String)s).substring(4), (Integer)n);System.out.println(variables.values()); :} POINT 
			;  
			 
expression ::= expr:e{: System.out.println(e); :} POINT |
			error POINT;

expr  ::= expr:e1 PLUS expr:e2  {: RESULT=(Integer)e1+(Integer)e2; :}   
          |
          MOINS expr:e {: RESULT = 0- (Integer)e; :}  %prec UMINUS 
          |
          expr:e1 MOINS expr:e2  {: RESULT=(Integer)e1-(Integer)e2; :}  
          |
          expr:e1 MULT expr:e2  {: RESULT=(Integer)e1*(Integer)e2; :}   
          |
          expr:e1 DIVIDE expr:e2  {: if((Integer)e2==0){System.out.println("Erreur division par 0");}else{RESULT=(Integer)e1/(Integer)e2;} :}
          |
          expr:e1 MOD expr:e2  {: if((Integer)e2==0){System.out.println("Erreur division par 0");}else{RESULT=(Integer)e1%(Integer)e2;} :}
          | 
          NOMBRE:n {: RESULT = (Integer) n ;:}  
          | 
          STRI:s {: if(variables.get((String)s)==null){System.out.println("Erreur variable non defini");} else{RESULT = variables.get((String)s);}  :}
          |
          PAR_G expr:e PAR_D  {: RESULT = (Integer) e ;:}
          ;
          
          

